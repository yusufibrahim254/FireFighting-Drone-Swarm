@startuml
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0

package "Main" {
  class Main {
    + main(args: String[]): void
  }
}

package "org.example" {
    class Sensor {
      - logs: List<String>
      - LOG_FILE: String = "docs/logs/system_event_logs.txt"
      - scheduledExecutor: ScheduledExecutorService
      + Sensor()
      + detectFire(zoneId: int): void
      + requestDrone(zoneId: int): void
      + droneArrived(droneId: int, zoneId: int): void
      + shutdown(): void
      - logEvent(eventType: EventType, entity: String, details: String): void
      - flushLogs(): void
    }

    class Scheduler {
      - socket: DatagramSocket
      - incidentQueue: Queue<Event>
      - droneHost: String
      - dronePort: int

      + Scheduler(port: int, droneHost: String, dronePort: int) throws SocketException
      + run(): void
      + main(args: String[]): void
      + sendEventToDrone(event: Event): boolean
      - processIncidentQueue(): void
      - corruptData(data: String): String
      - checkIfValidMessage(data: String): boolean
      }

  package DroneSystem {
    class BayController {
      - bayDoorOpen: boolean
      + BayController()
      + openBayDoors(): void
      + closeBayDoors(): void
      + isBayDoorOpen(): boolean
    }

    enum CommunicationDroneToSubsystem {
      LOCATION_UPDATE
      JOB_DELEGATION
      EVENT_RETURN
    }

   interface DroneState {
     + dispatch(drone: Drone): void
     + arrive(drone: Drone): void
     + dropAgent(drone: Drone): double
     + refill(drone: Drone): void
     + fault(drone: Drone): void
     + reset(drone: Drone): void
     + displayState(drone: Drone): void
   }
    class Drone {
      - faultTimer: Timer
      - id: int
      - battery: double
      - agentCapacity: double
      - maxAgentCapacity: double
      - state: DroneState
      - bayController: BayController
      - remainingWaterNeeded: double
      - currentPosition: int[]
      - incidentPosition: int[]
      - targetPosition: int[]
      - lastSentPosition: int[]
      - currentEvent: Event
      - batteryDepletionRate: double

      + Drone(id: int, initialCapacity: double, droneSubsystem: DroneSubsystem, batteryDepletionRate: double)
      + setCurrentPosition(position: int[]): void
      + delegateJob(): void
      + run(): void
      + moveTowardsTarget(): String
      + cleandAndSendEventBackToDroneSubsystem(): void
      + sendPositionToSubsystem(): void
      + getMaxAgentCapacity(): double
      + getAgentCapacity(): double
      + setAgentCapacity(agentCapacity: double): void
      + getBayController(): BayController
      + getRemainingWaterNeeded(): double
      + setRemainingWaterNeeded(remainingWaterNeeded: double): void
      + getBatteryLevel(): double
      + setBatteryLevel(newLevel: int): void
      + getState(): DroneState
      + setState(state: DroneState): void
      + setCurrentEvent(currentEvent: Event): void
      + getCurrentEvent(): Event
      + getIncidentPosition(): int[]
      + setIncidentPosition(incidentPosition: int[]): void
      + getBatteryDepletionRate(): double
      + getId(): int
      + getCurrentPosition(): int[]
      + setTargetPosition(targetPosition: int[]): void
      + getTargetPosition(): int[]
      + getLastSentPosition(): int[]
      + setLastSentPosition(lastSentPosition: int[]): void
      + setBatteryDepletionRate(batteryDepletionRate: double): void
    }

    class DroneEvent {
      - drone: Drone

      + DroneEvent(drone: Drone)
      + processEvent(event: Event, waterNeeded: double, drone: Drone): double
      + dropAgent(waterNeeded: double): double
      + refill(): void
    }

    class DroneSubsystem {
      - schedulerSocket: DatagramSocket
      - droneSocket: DatagramSocket
      - drones: List<Drone>
      - zones: Zones

      + DroneSubsystem(schedulerPort: int, dronePort: int, zonesFilePath: String)
      + run(): void
      + getZones(): Zones
      + getAvailableDrones(event: Event): int
      + main(args: String[]): void
      - handleSchedulerMessages(): void
      - handleDroneLocationUpdates(): void
      - processDroneLocationUpdate(locationData: String): void
      - assignEventToClosestIdleDrone(event: Event): void
      - calculateDistance(point1: int[], point2: int[]): double
      - isDroneEnRouteToSameSeverity(drone: Drone, severity: String): boolean
      - calculateDistance(drone: Drone, location: int[]): double
    }

      class DroppingAgentState {
        + dispatch(drone: Drone): void
        + arrive(drone: Drone): void
        + dropAgent(drone: Drone): double
        + refill(drone: Drone): void
        + fault(drone: Drone): void
        + reset(drone: Drone): void
        + displayState(drone: Drone): void
      }

      class EnRouteState {
        + dispatch(drone: Drone): void
        + arrive(drone: Drone): void
        + dropAgent(drone: Drone): double
        + refill(drone: Drone): void
        + fault(drone: Drone): void
        + reset(drone: Drone): void
        + displayState(drone: Drone): void
      }

     class FaultedState {
       + dispatch(drone: Drone): void
       + arrive(drone: Drone): void
       + dropAgent(drone: Drone): double
       + refill(drone: Drone): void
       + fault(drone: Drone): void
       + reset(drone: Drone): void
       + displayState(drone: Drone): void
     }

      class IdleState {
         + dispatch(drone: Drone): void
               + arrive(drone: Drone): void
               + dropAgent(drone: Drone): double
               + refill(drone: Drone): void
               + fault(drone: Drone): void
               + reset(drone: Drone): void
               + displayState(drone: Drone): void
      }

      class RefillingState {
        + dispatch(drone: Drone): void
              + arrive(drone: Drone): void
              + dropAgent(drone: Drone): double
              + refill(drone: Drone): void
              + fault(drone: Drone): void
              + reset(drone: Drone): void
              + displayState(drone: Drone): void
      }

      class ReturningState {
         + dispatch(drone: Drone): void
               + arrive(drone: Drone): void
               + dropAgent(drone: Drone): double
               + refill(drone: Drone): void
               + fault(drone: Drone): void
               + reset(drone: Drone): void
               + displayState(drone: Drone): void
      }
  }

  package FireIncidentSubsystem {
    class FireIncident {
     - EVENT_FILE: String = "docs/Sample_event_file.csv"
       - socket: DatagramSocket
       - schedulerAddress: InetAddress
       - schedulerPort: int

       + FireIncident(schedulerHost: String, schedulerPort: int) throws SocketException, UnknownHostException
       + run(): void
       + main(args: String[]): void
       - waitForAcknowledgment(event: Event): boolean
    }

    class Event {
        - id: int
        - time: String
        - zoneId: int
        - eventType: EventType
        - severityLevel: String
        - fault: String
        - assignedDrone: Drone
        - currentWaterAmountNeeded: double

        + Event(id: int, time: String, zoneId: int, eventType: EventType, severityLevel: String, fault: String)
        + getId(): int
        + getTime(): String
        + getZoneId(): int
        + getEventType(): EventType
        + getSeverityLevel(): String
        + getSeverityWaterAmount(): int
        + serialize(): String
        + getCurrentWaterAmountNeeded(): double
        + setCurrentWaterAmountNeeded(currentWaterAmountNeeded: double): void
        + getAssignedDrone(): Drone
        + setAssignedDrone(assignedDrone: Drone): void
        + getFault(): String
        + setFault(fault: String): void
        + isValidEvent(event: Event): boolean
        + toString(): String
        + deserialize(data: String): Event
    }

    package Helpers {
      class Coordinates {
        - x: int
        - y: int
        + Coordinates(x: int, y: int)
        + getX(): int
        + getY(): int
        + toString(): String
        + equals(Object): boolean
      }

      class EventReader {
        + readEvents(file: String): Event[]
      }

      enum EventType {
        FIRE_DETECTED
        DRONE_REQUEST
      }

      class Severity {
        - level: String
        - waterAmount: int
        + Severity(level: String)
        + getLevel(): String
        + getWaterAmount(): int
      }

      class Zone {
        - zoneId: int
        - zoneStart: Coordinates
        - zoneEnd: Coordinates
        + Zone(id: int, start: Coordinates, end: Coordinates)
        + getZoneId(): int
        + getZoneStart(): Coordinates
        + getZoneEnd(): Coordinates
        + toString(): String
      }

      class ZoneReader {
        + ZoneReader()
        + readZone(id: int, file: String): Zone
      }

      class Zones {
        - zoneMap: Map<Integer, int[]>
        + Zones(file: String)
        + getZoneMidpoint(id: int): int[]
        + getFurthestZoneMidpoint(): int[]
        + isZoneValid(id: int): boolean
        + toString(): String
      }
    }
  }
}

' === Relationships ===

' --- Main Dependencies ---
Main --> Scheduler
Main --> DroneSubsystem
Main --> FireIncident

' --- Drone Interactions ---
Drone --> DroneState
Drone --> DroneSubsystem
Drone --> Event
Drone --> BayController

DroneEvent --> Drone
DroneSubsystem --> Drone
DroneSubsystem --> Event

' --- DroneState Inheritance ---
DroneState <|.. DroppingAgentState
DroneState <|.. EnRouteState
DroneState <|.. FaultedState
DroneState <|.. IdleState
DroneState <|.. RefillingState
DroneState <|.. ReturningState

' --- Event Relationships ---
Event --> Drone

' --- FireIncident and Scheduler ---
FireIncident --> Event
Scheduler --> Event


@enduml