@startuml
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0

package "Main" {
  class Main {
    + main(args: String[]): void
  }
}

package "org.example" {
  class Scheduler {
    - socket: DatagramSocket
    - incidentQueue: Queue<Event>
    - droneHost: String
    - dronePort: int
    + Scheduler(port: int, droneHost: String, dronePort: int)
    + run(): void
  }

  package DroneSystem {
    class BayController {
      - bayDoorOpen: boolean
      + BayController()
      + openBayDoors(): void
      + closeBayDoors(): void
      + isBayDoorOpen(): boolean
    }

    enum CommunicationDroneToSubsystem {
      LOCATION_UPDATE
      JOB_DELEGATION
    }

    interface DroneState {
      + dispatch(drone: Drone): void
      + arrive(drone: Drone): void
      + dropAgent(drone: Drone): double
      + refill(drone: Drone): void
      + fault(drone: Drone): void
      + reset(drone: Drone): void
      + displayState(drone: Drone): void
    }

    class Drone {
      - id: int
      - battery: double
      - agentCapacity: double
      - maxAgentCapacity: double
      - state: DroneState
      - bayController: BayController
      - remainingWaterNeeded: double
      - currentPosition: int[]
      - incidentPosition: int[]
      - targetPosition: int[]
      - lastSentPosition: int[]
      - currentEvent: Event
      - batteryDepletionRate: double
      + setCurrentPosition(position: int[]): void
      + delegateJob(): void
      + run(): void
      + moveTowardsTarget(): void
      + getMaxAgentCapacity(): double
      + getAgentCapacity(): double
      + setAgentCapacity(agentCapacity: double): void
      + getBayController(): BayController
      + getRemainingWaterNeeded(): double
      + setRemainingWaterNeeded(remainingWaterNeeded: double): void
      + getBatteryLevel(): double
      + setBatteryLevel(newLevel: int): void
      + getState(): DroneState
      + setState(state: DroneState): void
      + setCurrentEvent(currentEvent: Event): void
      + getCurrentEvent(): Event
      + getIncidentPosition(): int[]
      + setIncidentPosition(incidentPosition: int[]): void
      + getBatteryDepletionRate(): double
      + getId(): int
      + getCurrentPosition(): int[]
      + setTargetPosition(targetPosition: int[]): void
      + getTargetPosition(): int[]
      + getLastSentPosition(): int[]
      + setLastSentPosition(lastSentPosition: int[]): void
      + setBatteryDepletionRate(batteryDepletionRate: double): void
    }

    class DroneEvent {
      - drone: Drone
      + DroneEvent(drone: Drone)
      + processEvent(event: Event, water: double, drone: Drone): double
      + dropAgent(waterNeeded: double): double
      + refill(): void
    }

    class DroneSubsystem {
      - schedulerSocket: DatagramSocket
      - droneSocket: DatagramSocket
      - drones: List<Drone>
      - zones: Zones
      + DroneSubsystem(schedulerPort: int, dronePort: int, zonesFilePath: String)
      + run(): void
      + getZones(): Zones
      + getAvailableDrones(event: Event): int
    }

      class DroppingAgentState {
        + dispatch(Drone): void
        + arrive(Drone): void
        + dropAgent(Drone): double
        + refill(Drone): void
        + fault(Drone): void
        + reset(Drone): void
        + displayState(Drone): void
      }

      class EnRouteState {
        + dispatch(Drone): void
        + arrive(Drone): void
        + dropAgent(Drone): double
        + refill(Drone): void
        + fault(Drone): void
        + reset(Drone): void
        + displayState(Drone): void
      }

      class FaultedState {
        + dispatch(Drone): void
        + arrive(Drone): void
        + dropAgent(Drone): double
        + refill(Drone): void
        + fault(Drone): void
        + reset(Drone): void
        + displayState(Drone): void
      }

      class IdleState {
        + dispatch(Drone): void
        + arrive(Drone): void
        + dropAgent(Drone): double
        + refill(Drone): void
        + fault(Drone): void
        + reset(Drone): void
        + displayState(Drone): void
      }

      class RefillingState {
        + dispatch(Drone): void
        + arrive(Drone): void
        + dropAgent(Drone): double
        + refill(Drone): void
        + fault(Drone): void
        + reset(Drone): void
        + displayState(Drone): void
      }

      class ReturningState {
        + dispatch(Drone): void
        + arrive(Drone): void
        + dropAgent(Drone): double
        + refill(Drone): void
        + fault(Drone): void
        + reset(Drone): void
        + displayState(Drone): void
      }
  }

  package FireIncidentSubsystem {
    class FireIncident {
      - socket: DatagramSocket
      - schedulerAddress: InetAddress
      - schedulerPort: int
      + FireIncident(schedulerHost: String, schedulerPort: int)
      + run(): void
    }

    class Event {
      - id: int
      - time: String
      - zoneId: int
      - eventType: EventType
      - severityLevel: String
      - assignedDrone: Drone
      - currentWaterAmountNeeded: double
      + getId(): int
      + getTime(): String
      + getZoneId(): int
      + getEventType(): EventType
      + getSeverityLevel(): String
      + getSeverityWaterAmount(): int
      + serialize(): String
      + getCurrentWaterAmountNeeded(): double
      + setCurrentWaterAmountNeeded(water: double): void
      + getAssignedDrone(): Drone
      + setAssignedDrone(drone: Drone): void
    }

    package Helpers {
      class Coordinates {
        - x: int
        - y: int
        + Coordinates(x: int, y: int)
        + getX(): int
        + getY(): int
        + toString(): String
        + equals(Object): boolean
      }

      class EventReader {
        + readEvents(file: String): Event[]
      }

      enum EventType {
        FIRE_DETECTED
        DRONE_REQUEST
      }

      class Severity {
        - level: String
        - waterAmount: int
        + Severity(level: String)
        + getLevel(): String
        + getWaterAmount(): int
      }

      class Zone {
        - zoneId: int
        - zoneStart: Coordinates
        - zoneEnd: Coordinates
        + Zone(id: int, start: Coordinates, end: Coordinates)
        + getZoneId(): int
        + getZoneStart(): Coordinates
        + getZoneEnd(): Coordinates
        + toString(): String
      }

      class ZoneReader {
        + ZoneReader()
        + readZone(id: int, file: String): Zone
      }

      class Zones {
        - zoneMap: Map<Integer, int[]>
        + Zones(file: String)
        + getZoneMidpoint(id: int): int[]
        + getFurthestZoneMidpoint(): int[]
        + isZoneValid(id: int): boolean
        + toString(): String
      }
    }
  }
}

' === Relationships ===

' --- Main Dependencies ---
Main --> Scheduler
Main --> DroneSubsystem
Main --> FireIncident

' --- Drone Interactions ---
Drone --> DroneState
Drone --> DroneSubsystem
Drone --> Event
Drone --> BayController

DroneEvent --> Drone
DroneSubsystem --> Drone
DroneSubsystem --> Event

' --- DroneState Inheritance ---
DroneState <|.. DroppingAgentState
DroneState <|.. EnRouteState
DroneState <|.. FaultedState
DroneState <|.. IdleState
DroneState <|.. RefillingState
DroneState <|.. ReturningState

' --- Event Relationships ---
Event --> Drone

' --- FireIncident and Scheduler ---
FireIncident --> Event
Scheduler --> Event


@enduml